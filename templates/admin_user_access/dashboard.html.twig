
{% extends 'adminBase.html.twig' %}

{% block title %}Admin Dashboard{% endblock title %}

{% block body %}
    <h1 class="h3 mb-3">Welcome back, {{ app.user.getUserProfile().getUserFullName() }}!</h1>
    <div class="row text-center mb-4">
        <div class="col d-flex flex-wrap justify-content-center admin-dashboard-metric-div">
            <canvas id="admin-dashboard-metric-1"></canvas>
            {# <p class="w-100">Active Users</p> #}
        </div>
        <div class="col d-flex flex-wrap justify-content-center admin-dashboard-metric-div">
            <canvas id="admin-dashboard-metric-2"></canvas>
            {# <p class="w-100">Storage Plans</p> #}
        </div>
        {# <div class="col">
            <canvas id="metric3"></canvas>
            <p>Storage Used</p>
        </div> #}
    </div>

    <div class="admin-title-bar mt-4">

        <div class="admin-title-bar-btns text-end">

            <a class="btn btn-primary" data-bs-toggle="modal" data-modal-title="Add New Firm" data-bs-target="#adminAddFirmModal">
                <i class="fas fa-plus me-2"></i> Add New Firm            
            </a>
            <a type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#adminImportFirmModal">Import Firms</a>

        </div>
        <div>
            <a href="{{ path('admin_download_firm_import_template_csv') }}">
                Download Firm Import Template CSV
            </a>
        </div>

    </div>

    <div class="container py-4">

        <table id="adminDashboardViewTable" class="table table-striped table-bordered align-middle">
            <thead>
                <tr>
                <th>Id</th>
                <th>Firm Name</th>
                <th>Firm Account Name</th>
                <th>Storage Plan</th>
                <th>Phone</th>
                <th>Active</th>
                <th>Created Date</th>
                <th>Updated Date</th>
                <th>View</th>
                </tr>
            </thead>
            <tbody>
                {% for firm in firms %}
                <tr>
                    <td>{{ firm.getId() }}</td>
                    <td>{{ firm.getName() }}</td>
                    <td>{{ firm.getAccount() }}</td>
                    <td>{{ firm.getStoragePlan().name }}</td>
                    <td>{{ firm.getPhone() }}</td>
                    <td>{% if firm.getActive() == true %}Active{% else %}Inactive{% endif %}</td>
                    <td>{{ firm.getCreatedDate()|date('Y-m-d') }}</td>
                    <td>{{ firm.getUpdatedDate()|date('Y-m-d') }}</td>
                    <td>
                        <a href="{{ path('admin_firm_view', { firm: firm.getId() }) }}">View</a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    {% block javascript %}

        <script>
            {# ag: use this to get root colors set in css #}
            const root = getComputedStyle(document.documentElement);

            const primaryColor = root.getPropertyValue('--color-primary').trim();
            const secondaryColor = root.getPropertyValue('--color-secondary').trim();
            const accentColor = root.getPropertyValue('--color-accent').trim();

            // Encode PHP array into a JS object
            const plans = {{ chartData.storagePlanMetrics|json_encode|raw }};

            // Extract labels and values
            const labels = Object.keys(plans);
            const values = Object.values(plans);

            const ctx = document.getElementById('admin-dashboard-metric-2');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: [primaryColor, secondaryColor, accentColor],
                        borderWidth: 0
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    plugins: {
                        legend: { position: 'right', labels: { boxWidth: 20, padding: 15}, align: 'center' },
                        datalabels: {
                            color: '#fff',
                            font: {
                                weight: 'bold'
                            },
                            formatter: (value, ctx) => {
                                return value.toFixed(1) + '%'; // show percentages
                            }
                        },
                        title: {
                            display: true,
                            text: 'Storage Plans',
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                        },
                    }
                },
                plugins: [ChartDataLabels] // register plugin
            });

            const createCircleChart = (id, value, color) => {
                new Chart(document.getElementById(id), {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [value, 100 - value],
                            backgroundColor: [color, '#e5e7eb'],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        cutout: '75%',
                        plugins: { 
                            legend: { display: false }, 
                            tooltip: { enabled: false },
                            title: {
                                display: true,
                                text: 'Active Firms',
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                },
                            },
                         },
                    },
                    plugins: [{
                        id: 'centerText',
                        beforeDraw: (chart) => {
                            const { ctx, chartArea: { width, height } } = chart;
                            ctx.save();
                            ctx.font = 'bold 20px sans-serif';
                            ctx.fillStyle = '#111827';
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            ctx.fillText(value + '%', width / 2, height / 2);
                        }
                    }]
                });
            };

            createCircleChart('admin-dashboard-metric-1', {{ chartData.activeFirmMetrics }}, primaryColor);
            {# createCircleChart('admin-dashboard-metric-2', 42, '#10b981'); // 42% #}
        </script>
    {% endblock %}
    {# ag: iterate modals needed, passed from the controller #}
    {% for modal in modals_to_include %}
        {% include 'layouts/modals/' ~ modal %}
    {% endfor %}

{% endblock %}


